<%- include('../includes/head.ejs') %>
<div class="section">
    <div class="container">
        <div class="columns is-multiline">
            <div class="column is-3">
              <%- include('menu.dashboard.ejs', {usuario: usuario}) %>
            </div>
            <div class="column is-9 is-multiline">
              <div class="content">
                <h1 class="is-tittle">Propiedades Asignadas</h1>
              </div>
            
            <div class="card is-shadowless has-background-light">
              <div class="card-content m-0 py-0">
                <div class="columns">
                  <div class="column is-7">
                    <div class="content pt-2">
                      <p>Se encontraron <%=cantidad%> propiedades.</p>
                    </div>
                    
                  </div>
                  <!--
                  <div class="column is-5">
                    <div class="field has-addons">
                      <div class="control">
                        <input class="input is-expanded" type="text" placeholder="Colonia / Titulo / ID" id="buscar">
                      </div>
                      <div class="control">
                        <a class="button is-danger">
                          Buscar
                        </a>
                      </div>
                    </div>
                  </div>
                  -->
                </div>
              </div>
            </div>  

              <div class="active-container" id="resultados">
                <input type="hidden" name="_csrf" value="<%= csrfToken %>" >
                <% if (propiedad.length > 0) { %>
                      <% for (let p of propiedad  ) { %>
                          <%- include('../propiedad/propiedad.horizontal.ejs', {propiedad: p}) %>
                      <% } %>
                  <% }  %>
              </div>  
            </div>
        </div>
    </div>
</div>  

<script src="../js/dist/bulma-toast.min.js"></script>
<% if(permisos.indexOf('panel_agente') != -1 | permisos.indexOf('panel_admin') != -1) { %>
  <div id="modal_cerrar" class="modal">
    <div class="modal-background"></div>
  
    <div class="modal-content">
      <div class="box">
        <h1 class="title is-6"> ¿Estas seguro que quieres cancelar este proceso? </h1>
        <button class="button is-danger" type="button" onclick="cancelProcedimiento()" > Continuar</button>
        <button class="button" type="button" onclick="quitarModal('modal_cerrar')" > Cancelar</button>
        <input type="hidden" id="cerrarProc" value="">
      </div>
    </div>
  
    <button class="modal-close is-large" aria-label="close"></button>
  </div>

  <div id="modal_borrar" class="modal">
    <div class="modal-background"></div>
  
    <div class="modal-content">
      <div class="box">
        <h1 class="title is-6"> ¿Estas seguro que quieres borrar esta propiedad? </h1>
        <button class="button is-danger" type="button" onclick="deleteProp()"> Continuar</button>
        <button class="button" type="button"  onclick="quitarModal('modal_borrar')"> Cancelar</button>
        <input type="hidden" id="borrar" value="">
      </div>
    </div>
  
    <button class="modal-close is-large" aria-label="close"></button>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Functions to open and close a modal
      function openModal($el) {
        $el.classList.add('is-active');
      }

      function closeModal($el) {
        $el.classList.remove('is-active');
      }

      function closeAllModals() {
        (document.querySelectorAll('.modal') || []).forEach(($modal) => {
          closeModal($modal);
        });
      }

      // Add a click event on buttons to open a specific modal
      (document.querySelectorAll('.js-modal-trigger') || []).forEach(($trigger) => {
        const modal = $trigger.dataset.target;
        const $target = document.getElementById(modal);

        $trigger.addEventListener('click', () => {
          openModal($target);
        });
      });

      // Add a click event on various child elements to close the parent modal
      (document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button') || []).forEach(($close) => {
        const $target = $close.closest('.modal');

        $close.addEventListener('click', () => {
          closeModal($target);
        });
      });

      // Add a keyboard event to close all modals
      document.addEventListener('keydown', (event) => {
        const e = event || window.event;

        if (e.keyCode === 27) { // Escape key
          closeAllModals();
        }
      });
    });

    const setPropiedadBorrar = (element) => {
      let id = element.id.split('-')[1];
      document.getElementById('borrar').value = id;

    }

    const setPropiedadCancelar = (element) => {
      let id = element.id.split('-')[1];
      document.getElementById('cerrarProc').value = id;
    }

    const quitarModal = (modal) => {
      document.getElementById(modal).classList.remove('is-active');
    }
  </script>

  <script>
    const cancelProcedimiento = ()=>{
        const idpro = document.getElementById('cerrarProc').value;
        const csrf = document.getElementsByName('_csrf')[0].value;

        //función que manda la petición asíncrona
        fetch('/estatus/cancel', {
            
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                idpro: idpro,
                _csrf: csrf,
                
            }),
        }).then(result => {
            return result.json(); //Regresa otra promesa
        }).then(data => {
          console.log(data);
          if(data.length > 0){
            bulmaToast.toast({ message: data, type: 'is-success', position: 'bottom-right', animate: { in: 'fadeIn', out: 'fadeOut' }})
            location.reload();
          }
          else
            bulmaToast.toast({ message: 'Hubo un error en la operacion', type: 'is-danger', position: 'bottom-right', animate: { in: 'fadeIn', out: 'fadeOut' }})
            
        }).catch(err => {
            console.log(err);
        });
    }

    const deleteProp = ()=>{
        const idpro = document.getElementById('borrar').value;
        const csrf = document.getElementsByName('_csrf')[0].value;

        //función que manda la petición asíncrona
        fetch('/propiedades/borrar', {
            
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: idpro,
                _csrf: csrf,
                
            }),
        }).then(result => {
            return result.json(); //Regresa otra promesa
        }).then(data => {
          if(data.data.length > 0){
            bulmaToast.toast({ message: 'Se ha borrado la propiedad', type: 'is-success', position: 'bottom-right', animate: { in: 'fadeIn', out: 'fadeOut' }})
            location.reload();
          }
          else
            bulmaToast.toast({ message: 'Hubo un error en la pagina', type: 'is-danger', position: 'bottom-right', animate: { in: 'fadeIn', out: 'fadeOut' }})
        }).catch(err => {
            console.log(err);
        });
    }
  </script>
<% } %>

<%- include('eliminar_ajax.ejs') %>

<%- include('search_ajax.ejs') %>

<%- include('../includes/foot.ejs') %>